library(limma)
library(gcrma)
library(hgu133plus2.db)
install.packages('hgu133plus2.db')
install.packages('hgu133plus2.db')
library(limma)
install.packages('limma')
install.packages('gcrma')
if (!require("edgeR")) install.packages("edgeR")
updateR()
install.packages("installr") # install
setInternet2(TRUE) # only for R versions older than 3.3.0
installr::updateR() # updating R
updateR()
setwd("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228")
read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt")
rawdata=read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt")
View(rawdata)
View(rawdata)
rawdata=read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt",sep=";",dec=".")
View(rawdata)
knitr::opts_chunk$set(echo = TRUE)
#install.packages(multtest)
qPCR_data = read.csv("C:/Users/bugli/Documents/CELINE_cours/LSTAT2340/donnees/data_qPCR.csv", sep = ";", dec = "." , header = TRUE)
rownames(qPCR_data) = qPCR_data[,2]
# données log-transformées et "brutes"
n=dim(qPCR_data)[1]
RAWdata = as.matrix(qPCR_data[,c(3:21)])
RAWdataNC=RAWdata
LOGdata = as.matrix(qPCR_data[,c(22:40)])
m=19
# Centrage et standardisation des données
RAWdata=RAWdata-matrix(apply(RAWdata,2,mean),nrow=n,ncol=m,byrow=T)
RAWdata=RAWdata/matrix(sqrt(apply(RAWdata,2,var)),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata-matrix(apply(LOGdata,2,mean),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata/matrix(sqrt(apply(LOGdata,2,var)),nrow=n,ncol=m,byrow=T)
qPCR_data = read.csv("C:/Users/bugli/Documents/CELINE_cours/LSTAT2340/donnees/data_qPCR.csv", sep = ";", dec = "." , header = TRUE)
rownames(qPCR_data) = qPCR_data[,2]
# données log-transformées et "brutes"
n=dim(qPCR_data)[1]
RAWdata = as.matrix(qPCR_data[,c(3:21)])
RAWdataNC=RAWdata
LOGdata = as.matrix(qPCR_data[,c(22:40)])
m=19
# Centrage et standardisation des données
RAWdata=RAWdata-matrix(apply(RAWdata,2,mean),nrow=n,ncol=m,byrow=T)
RAWdata=RAWdata/matrix(sqrt(apply(RAWdata,2,var)),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata-matrix(apply(LOGdata,2,mean),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata/matrix(sqrt(apply(LOGdata,2,var)),nrow=n,ncol=m,byrow=T)
qPCR_data = read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/projet données qPCR/data_qPCR.csv", sep = ";", dec = "." , header = TRUE)
rownames(qPCR_data) = qPCR_data[,2]
# données log-transformées et "brutes"
n=dim(qPCR_data)[1]
RAWdata = as.matrix(qPCR_data[,c(3:21)])
RAWdataNC=RAWdata
LOGdata = as.matrix(qPCR_data[,c(22:40)])
m=19
# Centrage et standardisation des données
RAWdata=RAWdata-matrix(apply(RAWdata,2,mean),nrow=n,ncol=m,byrow=T)
RAWdata=RAWdata/matrix(sqrt(apply(RAWdata,2,var)),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata-matrix(apply(LOGdata,2,mean),nrow=n,ncol=m,byrow=T)
LOGdata=LOGdata/matrix(sqrt(apply(LOGdata,2,var)),nrow=n,ncol=m,byrow=T)
# classe des miRs
Class = rep(0, dim(qPCR_data)[1])
Class[qPCR_data[,1]=="malade"] = 1
table(Class)
data = list(RAWdata = RAWdata, LOGdata =LOGdata)
table(qPCR_data[,1])
p_value <- numeric(length=m)
for(i in 1:m) {
p_value[i] <- t.test(RAWdata[Class==1,i], RAWdata[Class==0,i], var.equal = FALSE)$p.value
}
hist(p_value)
cat("Nombre de tests significatifs:",sum(p_value<0.05)," sur ",m," càd ",100*round(sum(p_value<0.05)/m,2),"%.")
View(rawdata)
View(rawdata)
rawdata$Patient Type
rawdata$PatientType
Patient_Type
rawdata$M71243_f_at
sick=data[ which(rawdata$M71243_f_at
dim(rawdata)
=='malade'), ]
dim(rawdata)
rawdata[3052]
colnames(rawdata[3052]) = "type"
rawdata$type
View(rawdata)
View(rawdata)
colnames(rawdata)[3052] = "type"
rawdata$type
rawdata=read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt",sep=";",dec=".")
data[ which(rawdata$type=='0)]
ALL=data[which(rawdata$type=='0)]
=='malade'), ]
control=data[ which(data$Groupe=='temoin'), ]
```
ALL=data[which(rawdata$type=='0),]
ALL=data[which(rawdata$type=='0'),]
ALL=rawdata[which(rawdata$type=='0'),]
ALL=rawdata[which(rawdata$type==0),]
rawdata=read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt",sep=";",dec=".")
colnames(rawdata)[3052] = "type"
ALL=rawdata[which(rawdata$type==0),]
allmean=apply(ALL[(1:3051)],2,mean)
amlmean=apply(AML[(1:3051)],2,mean)
AML=rawdata[which(rawdata$type==1),]
amlmean=apply(AML[(1:3051)],2,mean)
allmean
barplot(height=t(cbind(allmean,amlmean)),beside=T,space=c(0,2),col=c("black","red"), border=F,main="Mean comparison")
allmean=apply(ALL[(1:30)],2,mean)
amlmean=apply(AML[(1:30)],2,mean)
barplot(height=t(cbind(allmean,amlmean)),beside=T,space=c(0,2),col=c("black","red"), border=F,main="Mean comparison")
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.05)]
pander(pvalues)
library(corrplot)
library(knitr)
library(pander)
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.05)]
pander(pvalues)
length(pvalues)
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.05)]
message("proportion of normal variables for a 5% risk:",length(pvalues)/3051*100,"%")
message("proportion of normal variables for a 5% risk:",round(length(pvalues)/3051*100,2),"%")
length(pvalues)
for r in c(5,10){}
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("proportion of normal variables for a",r,"% risk:",round(length(pvalues)/3051*100,2),"%")
}
for r in c(5,10){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("proportion of normal variables for a",r,"% risk:",round(length(pvalues)/3051*100,2),"%")
}
for (r in c(5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("proportion of normal variables for a",r,"% risk:",round(length(pvalues)/3051*100,2),"%")
}
for (r in c(1,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("proportion of normal variables for a significance level of ",r,"%:",round(length(pvalues)/3051*100,2),"%")
}
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
log=apply(rawdata[1:3051],2,log)
View(log)
View(log)
rawdatap=rawdata-matrix(apply(rawdata,2,mean),nrow=n,ncol=m,byrow=T)
rawdatap=rawdata/matrix(sqrt(apply(rawdata,2,var)),nrow=n,ncol=m,byrow=T)
rawdatap=rawdata[1:3051]-matrix(apply(rawdata[1:3051],2,mean),byrow=T)
View(rawdatap)
View(rawdatap)
apply(rawdata[1:3051],2,mean)
library(textir)
install.packages('textir')
library(textir)
scale(rawdata)
rawdatap=scale(rawdata)
View(rawdatap)
View(rawdatap)
colmeans(rawdatap)
apply(rawdatap[1:3051],2,mean)
rawdatap=scale(rawdata[1:3051])
apply(rawdatap[1:3051],2,mean)
rawdatap[1:3051]
scale(rawdata[1:3051])
rawdatap=scale(rawdata[1:3051])
rawdatap
rawdatap=cbind(scale(rawdata[1:3051]),rawdata[3052])
rawdatap
View(rawdatap)
View(rawdatap)
apply(rawdatap[1:3051],2,mean)
apply(rawdatap[1:3051],2,sd)
rawdata=cbind(scale(rawdata[1:3051]),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
rawdata=read.csv("C:/Users/p/OneDrive - UCL/Traitement des données omics/Devoirs/Multiple testing/étude Golub-20180228/golub_complete_table.txt",sep=";",dec=".")
colnames(rawdata)[3052] = "type"
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
log=apply(rawdata[1:3051],2,log)
View(log)
View(log)
apply(rawdata[1:3051],2,log(+2))
apply(rawdata[1:3051],2,function(x){log(x+2)})
log=apply(rawdata[1:3051],2,function(x){log(x+2)})
View(log)
View(log)
max(rawdata)
min(rawdata)
dim(log)
log=cbind(apply(rawdata[1:3051],2,function(x){log(x+2)}),rawdata[3052])
dim(log)
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
for (r in c(1,5,10)){
shap=apply(log[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
log=cbind(apply(rawdata[1:3051],2,function(x){log(x+2)}),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(log[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
log=cbind(apply(rawdata[1:3051],2,function(x){log(x+1.7)}),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(log[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
+min(rawdata[1:3051])+0.001)
min(rawdata[1:3051])+0.001)
min(rawdata[1:3051])+0.001
log=cbind(apply(rawdata[1:3051],2,function(x){log(x+min(rawdata[1:3051])+0.001)}),rawdata[3052])
min=min(rawdata[1:3051])+0.001)
log=cbind(apply(rawdata[1:3051],2,function(x){log(x+min)+0.001)}),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(log[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
rawdata=cbind(scale(rawdata[1:3051]),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
rawdata=cbind(scale(rawdata[1:3051]),rawdata[3052])
for (r in c(1,5,10)){
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/3051*100,2),"%")
}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){}
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}\n
}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}
}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}
message(\n)
}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}
message(\n)
}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
}message(\n)}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
} message("\n")}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
} cat("\n")}
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"%")
} }
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"% (test on",i," variables")
} }
for (r in c(1,5,10)){
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("Proportion of non normal variables for a significance level of ",r,"%:  ",round(length(pvalues)/i*100,2),"% (test on ",i," variables")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,100,200,500,1000,3000))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on the ",i," first gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[1:i],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on the ",i," first gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
sample(colnames(rawdata), 1)
rawdata[sample(colnames(rawdata), 1)]
rawdata[sample(colnames(rawdata), 1)]
rawdata[sample(colnames(rawdata), 31
rawdata[sample(colnames(rawdata), 31)]
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
shap=apply(rawdata[1:3051)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message(round(length(pvalues)/i*100,2),"%\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
shap=apply(rawdata[1:3051)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message(round(length(pvalues)/i*100,2),"%\n")}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
shap=apply(rawdata[1:3051)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message(round(length(pvalues)/i*100,2),"%\n")
}
apply(rawdata[1:3051)],2,shapiro.test)
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message(round(length(pvalues)/i*100,2),"%\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(10,20,30,50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(50,200,1000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
for(i in (c(200,1000,2000,3051))){
shap=apply(rawdata[sample(colnames(rawdata), i)],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message("test on ",i," gene expressions: ",round(length(pvalues)/i*100,2),"%")
}
cat("\n")
}
rawdata=cbind(scale(rawdata[1:3051]),rawdata[3052])
for (r in c(1,5,10)){
message("Proportion of non-normal variables for a significance level of ",r,"%: ")
shap=apply(rawdata[1:3051],2,shapiro.test)
pvalues = sapply(shap, `[`, c("p.value"))
pvalues = pvalues[ which(pvalues<0.01*r)]
message(round(length(pvalues)/i*100,2),"%\n")
}
0.99^3051
1-4.819242e-14
