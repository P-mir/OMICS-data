# }
}
par(mfrow=c(1,2))
loadings <- fit.plsr$loadings
# sep<-c(0,30,60,90,120,150,180,210,238)
for (i in 1:2) {
# for (j in 1 : 8){
plot(loadings[,i], type="h", xaxt="n", xlab="",
ylab = "Loading", main = paste0("Loading ", i), lwd = 3)
axis(side = 1,  at = 1:length(var_names[(sep[j]+1):(sep[j+1])]), labels = var_names[(sep[j]+1):(sep[j+1])], las=2, cex.axis=0.7)
# }
}
set.seed(1)
fit.opls <- opls(x = X, y = YL, predI = 1,
orthoI = 4, scaleC = "center",
printL = TRUE, plotL = FALSE)
# Recherche du nombre de composantes optimales par CV
## dÃ©finition de la fonction d'estimation du modÃ¨le
ypred_FUN=function(x,y,XV,...) {
fit.opls <- opls(x = X, y = YL, predI = 1,
scaleC = "center" , ...)
ropls::predict(fit.opls, XV)
}
## Boucle sur le nombre de composantes possibles
RMSE.cv <- numeric()
yfit.cv <- list()
NCmax=10
for(i in 1:NCmax) {
rescv <- kfoldCV(X, YL, k = k, FUN = ypred_FUN,
orthoI = i, printL = FALSE,
plotL = FALSE)
yfit.cv[[i]] <- rescv
RMSE.cv[i] <- RMSE(y_true = YL, y_fit = yfit.cv[[i]])
}
# Recherche du nombre de composantes à garder
# plot(RMSE.cv, type = "o", main = "RMSE cross-validation")
ncomp.opt <- which.min(RMSE.cv)
ncomp.opt <- max(2, ncomp.opt)
abline(v = ncomp.opt, col = 2, lty = 2)
yfit.cv <-  yfit.cv[[ncomp.opt]]
# Ajustement du modÃ¨le avec le nombre optimal de composantes
fit.opls <- opls(x = XC, y = classY, predI = 1, orthoI = ncomp.opt,
scaleC = "center", printL = TRUE, plotL = FALSE)
yfit.train <- ropls::predict(fit.opls, X)
coef <- fit.opls@weightMN %*% fit.opls@cMN
nc <- ncomp.opt
# #add 0 to coef
coef2 = matrix(nrow = 238,ncol=1)
coef2 = as.matrix(as.numeric((c(coef[1:101],rep(0,14),coef[102:224]))))
rownames(coef2)=colnames(CoefficientMat)
colnames(coef2)<-"p1"
listr=printresmod(2,classY,yfit.train,yfit.cv,coef2,nc,listr)
fit.opls <- opls(x = X, y = YL, predI = 1,
orthoI = 4, scaleC = "center",
printL = TRUE, plotL = FALSE)
# Recherche du nombre de composantes optimales par CV
## dÃ©finition de la fonction d'estimation du modÃ¨le
ypred_FUN=function(x,y,XV,...) {
fit.opls <- opls(x = X, y = YL, predI = 1,
scaleC = "center" , ...)
ropls::predict(fit.opls, XV)
}
## Boucle sur le nombre de composantes possibles
RMSE.cv <- numeric()
yfit.cv <- list()
NCmax=10
for(i in 1:NCmax) {
rescv <- kfoldCV(X, YL, k = k, FUN = ypred_FUN,
orthoI = i, printL = FALSE,
plotL = FALSE)
yfit.cv[[i]] <- rescv
RMSE.cv[i] <- RMSE(y_true = YL, y_fit = yfit.cv[[i]])
}
# Recherche du nombre de composantes à garder
# plot(RMSE.cv, type = "o", main = "RMSE cross-validation")
ncomp.opt <- which.min(RMSE.cv)
ncomp.opt <- max(2, ncomp.opt)
abline(v = ncomp.opt, col = 2, lty = 2)
yfit.cv <-  yfit.cv[[ncomp.opt]]
# Ajustement du modÃ¨le avec le nombre optimal de composantes
fit.opls <- opls(x = XC, y = classY, predI = 1, orthoI = ncomp.opt,
scaleC = "center", printL = TRUE, plotL = FALSE)
yfit.train <- ropls::predict(fit.opls, X)
coef <- fit.opls@weightMN %*% fit.opls@cMN
nc <- ncomp.opt
# #add 0 to coef
coef2 = matrix(nrow = 238,ncol=1)
coef2 = as.matrix(as.numeric((c(coef[1:101],rep(0,14),coef[102:224]))))
rownames(coef2)=colnames(CoefficientMat)
colnames(coef2)<-"p1"
listr=printresmod(2,classY,yfit.train,yfit.cv,coef2,nc,listr)
fit.opls <- opls(x = X, y = YL, predI = 1,
orthoI = 4, scaleC = "center",
printL = TRUE, plotL = FALSE)
# Recherche du nombre de composantes optimales par CV
## dÃ©finition de la fonction d'estimation du modÃ¨le
ypred_FUN=function(x,y,XV,...) {
fit.opls <- opls(x = X, y = YL, predI = 1,
scaleC = "center" , ...)
ropls::predict(fit.opls, XV)
}
## Boucle sur le nombre de composantes possibles
RMSE.cv <- numeric()
yfit.cv <- list()
NCmax=10
for(i in 1:NCmax) {
rescv <- kfoldCV(X, YL, k = k, FUN = ypred_FUN,
orthoI = i, printL = FALSE,
plotL = FALSE)
yfit.cv[[i]] <- rescv
RMSE.cv[i] <- RMSE(y_true = YL, y_fit = yfit.cv[[i]])
}
# Recherche du nombre de composantes à garder
# plot(RMSE.cv, type = "o", main = "RMSE cross-validation")
ncomp.opt <- which.min(RMSE.cv)
ncomp.opt <- max(2, ncomp.opt)
abline(v = ncomp.opt, col = 2, lty = 2)
yfit.cv <-  yfit.cv[[ncomp.opt]]
# Ajustement du modÃ¨le avec le nombre optimal de composantes
fit.opls <- opls(x = XC, y = classY, predI = 1, orthoI = ncomp.opt,
scaleC = "center", printL = TRUE, plotL = FALSE)
yfit.train <- ropls::predict(fit.opls, X)
coef <- fit.opls@weightMN %*% fit.opls@cMN
nc <- ncomp.opt
# #add 0 to coef
coef2 = matrix(nrow = 238,ncol=1)
coef2 = as.matrix(as.numeric((c(coef[1:101],rep(0,14),coef[102:224]))))
rownames(coef2)=colnames(CoefficientMat)
colnames(coef2)<-"p1"
listr=printresmod(2,classY,yfit.train,yfit.cv,coef2,nc,listr)
listr
listr$CoefficientMat[1]
rownames(lisrt)
rownames(listr)
rownames(listr$CoefficientMat)
colnames(listr$CoefficientMat)
listr$CoefficientMat[1]
listr$CoefficientMat[]
listr$CoefficientMat[1,]
res= list(listr$CoefficientMat[1,])
res
max(res)
res= data.frame(listr$CoefficientMat[1,])
max(res)
res
max(res)
max(res,drop=FALSE)
which.max(res)
which.max(res)
res[1,]
res[,1]
which.max(res[,1])
rownames(res[apply(res, 2, which.max), ])
inds = which(mat == min(res), arr.ind=TRUE)
inds = which(res == min(res), arr.ind=TRUE)
inds
inds = which(res == max(res), arr.ind=TRUE)
inds
listr$CoefficientMat[1,]
sort(res)
res= data.frame(listr$CoefficientMat[1,])
sort(res)
undebug(ls)
sort(res)
sort(res)
res
sort(res[1])
sort(res[1])
res[1]
order(res)
res[order(-res)]
res[order(-res),]
res[order(-res),drop=FALSE]
rownames(res)
rownames(res)[order(-res)]
res[order(-res),]
rownames(res)[order(-res)]
res
table=res[order(-res),]
rownames(table)=names
table=data.frame(res[order(-res),])
rownames(table)=names
table
row.names(table)=names
names=rownames(res)[order(-res)]
table=data.frame(res[order(-res),])
row.names(table)=names
table
abs(table)
names=rownames(res)[order(-abs(res))]
table=data.frame(res[order(-abs(res)),])
row.names(table)=names
table
res= data.frame(listr$CoefficientMat[i,])
res
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
for (i in 1:4){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res
}
listr$CoefficientMat[4]
listr$CoefficientMat[4,]
listr$CoefficientMat[3,]
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res
}
kable(table)
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
# get_variables= function(i){
class(table)
View(table)
# get_variables= function(i){
table=data.frame()
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
# get_variables= function(i){
table=data.frame(rep(0,10))
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
kable(table)
# get_variables= function(i){
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
Table[i]=res[1:10,]
}
# get_variables= function(i){
table=list()
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
View(table)
View(table)
# get_variables= function(i){
table=data.frame(rep(1,10)
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
# get_variables= function(i){
table=data.frame(rep(1,10))
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
table[i]=res[1:10,]
}
kable(table)
table
res[1:10,]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
res
res[1:10,]
res= data.frame(listr$CoefficientMat[1,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
row.names(res)=names
res= data.frame(listr$CoefficientMat[1,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=res[1:10]
row.names(res)=names
res=res[1:10,]
row.names(res)=names
res=data.frame(res[1:10,])
res= data.frame(listr$CoefficientMat[1,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
res
# get_variables= function(i){
table=data.frame(rep(1,10))
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
res
table[i]=res
}
kable(table)
table
res
class(res)
# get_variables= function(i){
table=list()
# get_variables= function(i){
table=list()
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
}
kable(table)
# get_variables= function(i){
table=list()
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
table[i]=res
}
kable(table)
# get_variables= function(i){
table=data.frame(rep(1,10))
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
res
table[2*i-1]=res
table[2*i]
}
# get_variables= function(i){
table=matrix(nrow = 10,ncol=6)
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
res
table[2*i-1]=res
table[2*i]
}
kable(table)
# get_variables= function(i){
col=c=("PLS","OPLS","Lasso")
# get_variables= function(i){
col=c("PLS","OPLS","Lasso")
# get_variables= function(i){
col=c("PLS","OPLS","Lasso")
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
kable(res)
}
# get_variables= function(i){
col=c("PLS","OPLS","Lasso")
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
print(kable(res))
}
Ajustement du modC(le de regression stepwise forward
null <- glm(classY ~ 1, data=XC,family="binomial") # modele de depart
full <- glm(classY ~ ., data=XC,family="binomial") # modele avec toutes les variables
fit.sw <- step(null, scope=list(lower=null, upper=full), direction="both",trace=0) # critC(re d'opimisation= AIC
pander(summary.glm(fit.sw))
yfit.train <- fit.sw$fitted.values
namessw=names(coefficients(fit.sw))
coef <- CoefficientMat[1,]
coef[namessw[-1]]=coefficients(fit.sw)[-1]
nc <- length(coef)-1
ypred_FUN <- function(X,Y,XV,...){
null <- glm(Y ~ 1, data = X,family = "binomial")
full <- glm(Y ~ ., data = X,family = "binomial")
fit.sw <- step(null, scope = list(lower = null,
upper = full),
direction="both",trace=0)
coef <- coefficients(fit.sw)
XV <- cbind(1, XV[,names(coef)[-1]])
yfit.cv <- as.matrix(XV) %*% coef
yfit.cv <- exp(yfit.cv)/(1+exp(yfit.cv))
return(yfit.cv)
}
yfit.cv  <- kfoldCV(X = XC, Y = classY, k = k, FUN = ypred_FUN)
# Sauvegardes et impression de rC)sultats
listr=printresmod(1,classY,yfit.train,yfit.cv,coef,nc,listr)
# get_variables= function(i){
col=c("PLS","OPLS","Lasso")
col=c("PLS","OPLS","Lasso")
for (i in 1:3){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
return(kable(res))
}
# Ajustement du modC(le de regression stepwise forward
null <- glm(classY ~ 1, data=XC,family="binomial") # modele de depart
full <- glm(classY ~ ., data=XC,family="binomial") # modele avec toutes les variables
fit.sw <- step(null, scope=list(lower=null, upper=full), direction="both",trace=0) # critC(re d'opimisation= AIC
pander(summary.glm(fit.sw))
yfit.train <- fit.sw$fitted.values
namessw=names(coefficients(fit.sw))
coef <- CoefficientMat[1,]
coef[namessw[-1]]=coefficients(fit.sw)[-1]
nc <- length(coef)-1
ypred_FUN <- function(X,Y,XV,...){
null <- glm(Y ~ 1, data = X,family = "binomial")
full <- glm(Y ~ ., data = X,family = "binomial")
fit.sw <- step(null, scope = list(lower = null,
upper = full),
direction="both",trace=0)
coef <- coefficients(fit.sw)
XV <- cbind(1, XV[,names(coef)[-1]])
yfit.cv <- as.matrix(XV) %*% coef
yfit.cv <- exp(yfit.cv)/(1+exp(yfit.cv))
return(yfit.cv)
}
yfit.cv  <- kfoldCV(X = XC, Y = classY, k = k, FUN = ypred_FUN)
# Sauvegardes et impression de rC)sultats
listr=printresmod(1,classY,yfit.train,yfit.cv,coef,nc,listr)
get_variables=function(i){
col=c("PLS","OPLS","Lasso")
for (i in 1:i){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
return(res)
}
}
kable(get_variables(1))
kable(get_variables(2))
get_variables=function(i){
col=c("PLS","OPLS","Lasso")
for (i in i){
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
return(res)
}
}
kable(get_variables(3))
kable(get_variables(1))
kable(get_variables(2))
get_variables=function(i){
col=c("PLS","OPLS","Lasso")
res= data.frame(listr$CoefficientMat[i,])
names=rownames(res)[order(-abs(res))]
res=data.frame(res[order(-abs(res)),])
names=names[1:10]
res=data.frame(res[1:10,])
row.names(res)=names
colnames(res)=col[i]
return(res)
}
kable(get_variables(2))
pander(get_variables(1))
