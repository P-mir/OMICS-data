spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Guillaume/Dropbox/Master Data science/Q2/Traitement statistique des données-OMICS/Projets/Projet 6/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Guillaume/Dropbox/Master Data science/Q2/Traitement statistique des données-OMICS/Projets/Projet 6/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
read.table(file.path(pathdir,data_used[1]),header=T,sep=";",row.names=1,dec=".")
file.path(pathdir,data_used[1])
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[1]),header=T,sep=";",row.names=1,dec="."))
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
print("matfull")
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
print("matfull")
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
print("matfull")
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
# spectral_matrices_list[[1]]<-apply(spectral_matrices_list[[1]], 2, rev)
colnames(spectral_matrices_list[[1]])<-rev(colnames(spectral_matrices_list[[2]]))
rownames(spectral_matrices_list[[1]])<-rownames(spectral_matrices_list[[2]])
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
spectral_matrices_list[[1]]
spectral_matrices_list[[1]][,1:238]
length(spectral_matrices_list)
length(spectral_matrices_list$CarreLatin_full_PEPS)
spectral_matrices_list$CarreLatin_full_PEPS
#modification de la matrice PEPS
spectral_matrices_list[[1]]<-as.matrix(read.csv("CarreLatin_full_Peps.csv"))
spectral_matrices_list[[1]]
spectral_matrices_list[[1]]<-spectral_matrices_list[[1]][,-1]
spectral_matrices_list[[1]]=apply(spectral_matrices_list[[1]][,1:238],2,as.numeric)
spectral_matrices_list[[1]]
#  Choix du répertoire où sont les matrices de donnÃ©es
pathdir="~/Traitement des données omics/Devoirs/P6  Prétraitement de données métabolomiques H-NMR/"
#  Definition des matrices à lire dans ce répertoire
data_used=c("CarreLatin_full_Peps.csv","CarreLatinMBXmanualPPMINV.csv")
spectral_matrices_names=c("CarreLatin_full_PEPS","CarreLatin_Manual_500P")
nmatrices=length(data_used)
# Lecture des matrices de données.
## On les stocke dans spectral_matrices_list
## On remplace les noms des colonnes par des noms sans le X
spectral_matrices_list=list()
for(i in 1:nmatrices)
{
spectral_matrices_list[[spectral_matrices_names[i]]]=as.matrix(read.table(file.path(pathdir,data_used[i]),header=T,sep=";",row.names=1,dec="."))
dimnames(spectral_matrices_list[[i]])[[2]]=as.numeric(substring(dimnames(spectral_matrices_list[[i]])[[2]],first=2))
# cat("\n Lecture de la matrice : ",spectral_matrices_names[i])
}
# On recherche la matrice des spectres communs dans les 2 bases (si ce n'est pas le cas au départ), on eleve les blancs des noms
dimnames(spectral_matrices_list[[1]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[1]])[[1]]) # on enleve des blancs des noms des spectres.
namespectra=dimnames(spectral_matrices_list[[1]])[[1]]
countspectra=matrix(nrow=nmatrices+1,ncol=2)
dimnames(countspectra)=list(c(spectral_matrices_names,"Common Spectra"),c("Nb of spectra","Nb Buckets"))
countspectra[1,1]=length(namespectra)
countspectra[1,2]=dim(spectral_matrices_list[[1]])[2]
for(i in 2:nmatrices)
{
dimnames(spectral_matrices_list[[i]])[[1]]=gsub(" ","",dimnames(spectral_matrices_list[[i]])[[1]])
newnames=dimnames(spectral_matrices_list[[i]])[[1]]
compnames=is.element(namespectra,newnames)
countspectra[i,1]=length(newnames)
countspectra[i,2]=dim(spectral_matrices_list[[i]])[2]
namespectra=namespectra[compnames]
}
countspectra[nmatrices+1,1]=length(namespectra)
# pander(countspectra)
# On extrait les bons spectres et on les met dans le même ordre
for(i in 1:nmatrices)
{
spectral_matrices_list[[i]]=spectral_matrices_list[[i]][namespectra,]
}
# Creation des variables qui dèfinissent les groupes
TypeY=rep(c("A","B","C"),c(9,9,9))
classY=as.numeric(as.factor(TypeY))
groupes=classY
for(i in 1:nmatrices)
{
Draw(spectral_matrices_list[[i]][5:8,],type.draw="signal",subtype="stacked",num.stacked=4)
}
# DÃ©finitions des matrices de rÃ©sultats
Inertiavalues=matrix(nrow=nmatrices,ncol=3)
dimnames(Inertiavalues)=list(spectral_matrices_names,c("BI","WI","TI"))
Inertiapc=Inertiavalues
nGroup = length(unique(groupes))
InertiaPerGroup=matrix(nrow=nGroup+1,ncol=nmatrices)
dimnames(InertiaPerGroup)[[1]]=c(unique(groupes),"Total")
dimnames(InertiaPerGroup)[[2]]=spectral_matrices_names
# Boucle de calcul des inerties
for(i in 1:nmatrices)
{
Inertia.res = Inertia(x = spectral_matrices_list[[i]], y = groupes, print = FALSE)
Inertiavalues[i,]=Inertia.res[["Between_within"]][1,]
Inertiapc[i,]=Inertia.res[["Between_within"]][2,]
InertiaPerGroup[,i]=Inertia.res[["Per_group"]][,2]
}
# Impression des résultat des inerties
cat("Inerties non standardisées")
pander(list(Inerties_non_standardisees=Inertiavalues,Inerties_en_PC=Inertiapc,Inerties_within_groups=InertiaPerGroup))
ncompPCA = 4
# ExÃ©cution des PCAs
PCA.res= vector("list")
for(i in 1:nmatrices)
{
PCA.res[[i]] = MBXUCL::SVDforPCA(spectral_matrices_list[[i]], ncomp=ncompPCA)
}
Eigenvalues=matrix(nrow=nmatrices,ncol=ncompPCA)
dimnames(Eigenvalues)=list(spectral_matrices_names,paste("PC",1:ncompPCA))
for(i in 1:nmatrices)
{
Eigenvalues[i,]=cumsum(PCA.res[[i]][["eigval"]][1:ncompPCA]/sum(PCA.res[[i]][["eigval"]]))
}
pander(Eigenvalues)
draw.scores12 = vector("list")
draw.scores34 = vector("list")
for(i in 1:nmatrices)
{
draw.scores12[[spectral_matrices_names[i]]]=MBXUCL::DrawScores(PCA.res[[i]], drawNames=TRUE, type.obj = "PCA",createWindow=FALSE, main = paste0("PCA score plot for ",spectral_matrices_names[i]),pch = groupes, col = groupes,axes =c(1,2))
draw.scores34[[spectral_matrices_names[i]]]=MBXUCL::DrawScores(PCA.res[[i]], drawNames=TRUE, type.obj = "PCA",createWindow=FALSE, main = paste0("PCA score plot for ",spectral_matrices_names[i]),pch = groupes,col = groupes, axes =c(3,4))
}
draw.scores12
draw.scores34
draw.loadings12 = vector("list")
draw.loadings34 = vector("list")
for(i in 1:nmatrices)
{
draw.loadings12[[spectral_matrices_names[i]]] = MBXUCL::DrawLoadings(PCA.res[[i]],  type.obj = "PCA",createWindow=FALSE, main = paste0("PCA loadings plot for", spectral_matrices_names[i]),axes = c(1:2), loadingstype="l", num.stacked = 2)[[1]]
draw.loadings34[[spectral_matrices_names[i]]] = MBXUCL::DrawLoadings(PCA.res[[i]],  type.obj = "PCA",createWindow=FALSE, main = paste0("PCA loadings plot for", spectral_matrices_names[i]),axes = c(3:4), loadingstype="l", num.stacked = 2)[[1]]
}
draw.loadings12
draw.loadings34
nClust = length(unique(groupes)) # nombre de clusters à rechercher
clustres=matrix(0,nrow=nmatrices,ncol=8)
dimnames(clustres)=list(spectral_matrices_names,c("DunnW","DunnKM","DBW","DBKM","RandW","RandKM","AdjRandW","AdjRandKM"))
for(i in 1:nmatrices)
{
print(spectral_matrices_names[i])
ClustMIC.res = MBXUCL::ClustMIC(Intensities = spectral_matrices_list[[i]], nClust = nClust, Trcl = groupes, Dendr = TRUE)
clustres[i,]=as.numeric(ClustMIC.res[1,1:8])
}
pander(clustres)
nLVPLSDA = 4  # nombre du composantes du PLSDA
nrep=nlevels(as.factor(groupes)) # Nombre de rÃ©ponses
PLSDA.res=list()
perf.plsda.RMSEP=matrix(nrow=nmatrices,ncol=nrep)
dimnames(perf.plsda.RMSEP)=list(spectral_matrices_names,paste0("Y",1:nrep))
perf.plsda.R2=perf.plsda.RMSEP
perf.plsda.Q2=perf.plsda.RMSEP
for(i in 1:nmatrices)
{
# cat("PLS-DA pour ",spectral_matrices_names[i])
PLSDA.res [[i]]= PLSDA(x = spectral_matrices_list[[i]], y = groupes, nLV = nLVPLSDA, drawRMSEP = TRUE)
perf.plsda.RMSEP[i,] = PLSDA.res[[i]]$RMSEP
perf.plsda.R2[i,]=PLSDA.res[[i]]$R2
perf.plsda.Q2[i,]=PLSDA.res[[i]]$Q2
}
pander(list(RMSEP=perf.plsda.RMSEP,R2=perf.plsda.R2,Q2=perf.plsda.Q2))
PLSDA.scores= vector("list")
for(i in 1:nmatrices)
{
PLSDA.scores[[spectral_matrices_names[i]]]=DrawScores(PLSDA.res[[i]], drawNames=TRUE, type.obj = c("PLSDA"),
createWindow=FALSE, main = paste0("PLSDA score plot for ", spectral_matrices_names[i]),pch = groupes,col = groupes, axes =c(1,2))
}
PLSDA.scores
PLSDA.loadings= vector("list")
for(i in 1:nmatrices)
{
PLSDA.loadings[[spectral_matrices_names[i]]]=DrawLoadings(PLSDA.res[[i]],  type.obj = "PLSDA",
createWindow=FALSE, main = paste0("PLSDA loadings plot for", spectral_matrices_names[i]),
axes = c(1:2),  loadingstype="l", num.stacked = 2)
}
PLSDA.loadings
